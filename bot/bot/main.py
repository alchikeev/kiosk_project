import logging
import os
import json
import requests
from aiogram import Bot, Dispatcher, types, executor
from dotenv import load_dotenv
from .sessions import save_session, get_kiosk_by_session
from aiogram.types import InputFile

api_url = "http://127.0.0.1:5000/upload"  # –ª–æ–∫–∞–ª—å–Ω—ã–π API –∫–∏–æ—Å–∫–∞

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=["start"])
async def handle_start(message: types.Message):
    if message.get_args():
        session_id = message.get_args()

        if session_id.startswith("print_") or session_id.startswith("kiosk"):
            # –†–µ–∂–∏–º –ø–µ—á–∞—Ç–∏
            kiosk_id = session_id.split("_")[1] if "_" in session_id else session_id
            save_session(message.from_user.id, kiosk_id)
            await message.answer(f"‚úÖ –ê–ø–ø–∞—Ä–∞—Ç {kiosk_id} –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –∏–ª–∏ DOCX —Ñ–∞–π–ª –¥–ª—è –ø–µ—á–∞—Ç–∏.")

        elif session_id.startswith("scan_"):
            try:
                scan_sessions_path = "/home/test/–î–æ–∫—É–º–µ–Ω—Ç—ã/1/kiosk_core/scan_sessions.json"
                with open(scan_sessions_path, "r", encoding="utf-8") as f:
                    sessions = json.load(f)

                session = sessions.get(session_id)
                if not session:
                    await message.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return

                if session.get("used"):
                    await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç QR-–∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
                    return

                file_path = session.get("file_path")
                if not file_path or not os.path.exists(file_path):
                    await message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                await message.answer_document(InputFile(file_path), caption="üìé –í–∞—à —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")

                # –û—Ç–º–µ—Ç–∏–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
                session["used"] = True
                sessions[session_id] = session
                with open(scan_sessions_path, "w", encoding="utf-8") as f:
                    json.dump(sessions, f, indent=2, ensure_ascii=False)

            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        else:
            await message.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞.")
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —É –∞–ø–ø–∞—Ä–∞—Ç–∞.")


@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def handle_file(message: types.Message):
    user_id = message.from_user.id
    kiosk_id = get_kiosk_by_session(user_id)
    if not kiosk_id:
        await message.answer("‚ö† –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ QR-–∫–æ–¥ —É –∞–ø–ø–∞—Ä–∞—Ç–∞.")
        return

    document = message.document
    file_path = f"data/files/{document.file_name}"
    await document.download(destination_file=file_path)
    await message.answer(f"‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å –≤ –∞–ø–ø–∞—Ä–∞—Ç {kiosk_id}.")

    try:
        with open(file_path, "rb") as f:
            files = {"file": (document.file_name, f)}
            response = requests.post(api_url, files=files)

        if response.status_code == 200:
            await message.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —Ñ–∞–π–ª–∞")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
