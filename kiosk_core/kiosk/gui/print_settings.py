import json
import os
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, QLineEdit, QMessageBox
)
from PyQt5.QtCore import Qt

class PrintSettingsWidget(QWidget):
    def __init__(self, total_pages, on_apply, on_cancel):
        super().__init__()
        self.total_pages = total_pages
        self.on_apply = on_apply
        self.on_cancel = on_cancel

        self.layout = QVBoxLayout()
        self.layout.setContentsMargins(30, 10, 30, 10)
        self.layout.setSpacing(15)
        self.setLayout(self.layout)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—á–∞—Ç–∏")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("font-size: 22px; font-weight: bold;")
        self.layout.addWidget(title)

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav = QHBoxLayout()
        back = QPushButton("‚Üê –ù–∞–∑–∞–¥")
        home = QPushButton("üè† –ì–ª–∞–≤–Ω–∞—è")
        back.clicked.connect(self.on_cancel)
        home.clicked.connect(self.on_cancel)
        for btn in (back, home):
            btn.setStyleSheet("font-size: 16px; padding: 6px 12px;")
            nav.addWidget(btn)
        self.layout.addLayout(nav)

        # –ü—Ä–µ–≤—å—é
        preview = QLabel("üñºÔ∏è –ü—Ä–µ–≤—å—é –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)")
        preview.setAlignment(Qt.AlignCenter)
        preview.setStyleSheet("border: 1px solid #ccc; padding: 20px; font-size: 16px;")
        self.layout.addWidget(preview)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.pages_label = QLabel(f"–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {self.total_pages}")
        self.pages_label.setStyleSheet("font-size: 16px;")
        self.layout.addWidget(self.pages_label)

        # –¶–µ–Ω–∞ –∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        try:
            with open(os.path.join(os.path.dirname(__file__), '../../settings.json'), 'r', encoding='utf-8') as f:
                settings = json.load(f)
            self.price_per_page = settings.get("price_per_page", 10)
        except:
            self.price_per_page = 10

        self.cost_label = QLabel()
        self.cost_label.setStyleSheet("font-size: 16px; font-weight: bold;")
        self.layout.addWidget(self.cost_label)

        # –î–∏–∞–ø–∞–∑–æ–Ω –≤–≤–æ–¥–∞
        self.range_label = QLabel("–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1-5,8,10):")
        self.range_label.setStyleSheet("font-size: 14px;")
        self.layout.addWidget(self.range_label)

        self.range_input = QLineEdit()
        self.range_input.setStyleSheet("font-size: 16px; padding: 6px;")
        self.range_input.textChanged.connect(self.update_price_preview)
        self.layout.addWidget(self.range_input)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
        btns = QHBoxLayout()
        self.confirm_btn = QPushButton("–î–∞–ª–µ–µ")
        self.confirm_btn.setStyleSheet("font-size: 18px; padding: 10px; font-weight: bold;")
        self.confirm_btn.clicked.connect(self.handle_apply)
        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        cancel_btn.setStyleSheet("font-size: 16px; padding: 8px;")
        cancel_btn.clicked.connect(self.on_cancel)
        btns.addWidget(self.confirm_btn)
        btns.addWidget(cancel_btn)
        self.layout.addLayout(btns)

        self.update_price_preview()

    def parse_page_range(self, text):
        pages = set()
        parts = text.split(',')
        for part in parts:
            part = part.strip()
            if not part:
                continue
            if '-' in part:
                try:
                    start, end = map(int, part.split('-'))
                    if start <= end:
                        pages.update(range(start, end + 1))
                except:
                    continue
            else:
                try:
                    pages.add(int(part))
                except:
                    continue
        return sorted(p for p in pages if 1 <= p <= self.total_pages)

    def update_price_preview(self):
        text = self.range_input.text().strip()
        if not text:
            pages_count = self.total_pages
        else:
            try:
                selected_pages = self.parse_page_range(text)
                pages_count = len(selected_pages)
            except:
                pages_count = 0
        total_price = pages_count * self.price_per_page
        self.cost_label.setText(f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Å–æ–º")

    def handle_apply(self):
        text = self.range_input.text().strip()
        if not text:
            selected_pages = list(range(1, self.total_pages + 1))
        else:
            try:
                selected_pages = self.parse_page_range(text)
                if not selected_pages:
                    raise ValueError
            except:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
                return
        self.on_apply(selected_pages)
